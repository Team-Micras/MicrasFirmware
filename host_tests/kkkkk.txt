cmake_minimum_required(VERSION 3.22)

###############################################################################
## CMake Configuration
###############################################################################

project(host_micras_tests C CXX)

set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 20)

set(CMAKE_C_COMPILER gcc)
set(CMAKE_CXX_COMPILER g++)

set(CMAKE_C_FLAGS "")
set(CMAKE_CXX_FLAGS "")
set(CMAKE_EXE_LINKER_FLAGS "")
set(CMAKE_SHARED_LINKER_FLAGS "")

set(CMAKE_C_FLAGS "-Wall -Wextra -g")
set(CMAKE_CXX_FLAGS "-Wall -Wextra -g")

# Add mock implementation for hardware-dependent modules
# add_subdirectory(mock)

# Find testing framework (e.g., Google Test)
find_package(GTest QUIET)
if(NOT GTest_FOUND)
    # If GTest not found globally, use CMake's FetchContent to download it
    include(FetchContent)
    FetchContent_Declare(
        googletest
        GIT_REPOSITORY https://github.com/google/googletest.git
        GIT_TAG release-1.12.1
    )
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
    FetchContent_MakeAvailable(googletest)
endif()

# Find all test source files
file(GLOB_RECURSE HOST_TEST_SOURCES CONFIGURE_DEPENDS "src/*.c*")

# Empty list to collect all test targets
set(HOST_TEST_TARGETS "")

# Process each test file to create test executable
foreach(TEST_FILE ${HOST_TEST_SOURCES})
    get_filename_component(TEST_NAME ${TEST_FILE} NAME_WLE)

    add_executable(${TEST_NAME}
        ${TEST_FILE}
        ${CMAKE_CURRENT_SOURCE_DIR}/include/sample1.cc  # Add implementation file
    )

    target_include_directories(${TEST_NAME} PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        ${CMAKE_SOURCE_DIR}/config
        # ${CMAKE_SOURCE_DIR}/include
        # ${CMAKE_SOURCE_DIR}/micras_core/include
        # ${CMAKE_SOURCE_DIR}/micras_nav/include
        # ${CMAKE_SOURCE_DIR}/micras_comm/include
    )

    # Instead of directly linking against the target libraries (which may have ARM-specific code),
    # we'll create host-compatible versions of them by including their source files directly
    # file(GLOB_RECURSE CORE_SOURCES "${CMAKE_SOURCE_DIR}/micras_core/src/*.c*")
    # file(GLOB_RECURSE NAV_SOURCES "${CMAKE_SOURCE_DIR}/micras_nav/src/*.c*")
    # file(GLOB_RECURSE COMM_SOURCES "${CMAKE_SOURCE_DIR}/micras_comm/src/*.c*")

    # Add these source files directly to the test executable
    target_sources(${TEST_NAME} PRIVATE
        # ${CORE_SOURCES}
        # ${NAV_SOURCES}
        # ${COMM_SOURCES}
    )

    # Link against the mock HAL and test framework
    target_link_libraries(${TEST_NAME} PUBLIC
        # mock_hal
        GTest::gtest
        GTest::gtest_main
    )

    # Add to list of test targets
    list(APPEND HOST_TEST_TARGETS ${TEST_NAME})

    # Add as a CTest test
    add_test(NAME ${TEST_NAME} COMMAND ${TEST_NAME})
endforeach()

# Add a single target to build all tests
add_custom_target(build_host_tests
    DEPENDS ${HOST_TEST_TARGETS}
    COMMENT "Building all host tests"
)

# Add a single target to run all tests
add_custom_target(run_host_tests
    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
    DEPENDS ${HOST_TEST_TARGETS}
    COMMENT "Running all host tests"
)

# Create a combined target that both builds and runs tests
add_custom_target(host_tests
    DEPENDS build_host_tests run_host_tests
    COMMENT "Building and running host tests"
)
